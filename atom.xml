<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jhhgo.github.io</id>
    <title>Jhh的小站</title>
    <updated>2020-07-08T14:42:38.953Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jhhgo.github.io"/>
    <link rel="self" href="https://jhhgo.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://jhhgo.github.io/images/avatar.png</logo>
    <icon>https://jhhgo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Jhh的小站</rights>
    <entry>
        <title type="html"><![CDATA[前端安全]]></title>
        <id>https://jhhgo.github.io/post/qian-duan-an-quan/</id>
        <link href="https://jhhgo.github.io/post/qian-duan-an-quan/">
        </link>
        <updated>2020-06-21T04:25:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前端安全">前端安全</h1>
<h2 id="被动攻击">被动攻击</h2>
<p>被动攻击（passive attack）是指利用圈套策略执行攻击代码的攻 击模式。在被动攻击过程中，攻击者不直接对目标Web 应用访问发起攻击</p>
<h2 id="主动攻击">主动攻击</h2>
<p>主动攻击（active attack）是指攻击者通过直接访问 Web 应用， 把攻击代码传入的攻击模式。由于该模式是直接针对服务器上的 资源进行攻击，因此攻击者需要能够访问到那些资源</p>
<h2 id="xss">XSS</h2>
<h3 id="概念">概念</h3>
<p>Cross-Site Scripting，跨站脚本攻击</p>
<p>是指通过存在安全漏洞的 Web 网站注册用户的浏览器内运行非法的 HTML 标签或 JavaScript 进 行的一种攻击</p>
<h3 id="类型">类型</h3>
<ol>
<li>
<p>反射型</p>
<p>xss攻击代码在url中，作为输入代码提交到服务器，服务器解析后响应给浏览器，最后浏览器执行这段xss代码</p>
</li>
<li>
<p>存储型</p>
<p>xss代码，存储在服务器</p>
</li>
<li>
<p>基于DOM的XSS</p>
<p>依靠浏览器的dom解析，不与服务器交互</p>
</li>
</ol>
<h3 id="防御">防御</h3>
<p>xss本质是'html注入'，用户的输入数据被当成html代码的一部分来执行</p>
<ol>
<li>
<p>输入过滤</p>
<p>用户输入、url参数、post请求参数、ajax</p>
</li>
<li>
<p>输出编码</p>
<p>在HTML标签或属性中输出数据，使用HTMLEncode，将字符转化为html实体字符。通常转化&amp; &lt; &gt; &quot; ' / 这几个字符。</p>
<p>在Script标签或事件中输出数据，使用JavaScriptEncode，使用转义符 \ 对特殊字符转义。除了数字和字母，对小于127的字符编码使用\xHH表示，对大于127的字符用Unicode表示。</p>
</li>
<li>
<p>其他</p>
<p>将cookie设置为Http-only，js脚本将无法读取cookie</p>
<p>CSP 内容安全策略，本质建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行</p>
<ul>
<li>
<p>设置HTTP Header的Content-security-Policy</p>
<ul>
<li>
<p>只允许加载本站资源</p>
<pre><code class="language-http">Content-Security-Policy: default-src ‘self’
</code></pre>
</li>
<li>
<p>图片只允许加载 HTTPS 协议</p>
<pre><code class="language-http">Content-Security-Policy: img-src https://*
</code></pre>
</li>
<li>
<p>允许加载任何来源框架</p>
<pre><code class="language-http">Content-Security-Policy: child-src 'none'
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="csrf">CSRF</h2>
<h3 id="概念-2">概念</h3>
<p>Cross-Site Request Forgeries，跨站点请求伪造</p>
<p>攻击 者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信 息或设定信息等某些状态更新，属于被动攻击</p>
<h3 id="步骤">步骤</h3>
<ol>
<li>受害者登录受信任网站A，并在本地生成Cookie</li>
<li>受害者访问危险网站B， 网站B中发送请求给网站A，请求会自动带上Cookie</li>
</ol>
<h3 id="防御-2">防御</h3>
<ol>
<li>
<p>加入验证码（因为CSRF攻击往往在受害者不知情的时候成功）</p>
</li>
<li>
<p>尽量使用POST请求</p>
</li>
<li>
<p>验证请求首部字段Referer</p>
<p>首部字段 Referer 会告知服务器请求的原始资源的 URI，验证Referer字段以确定发出的请求是否是从本站点发出的，若不是则拒绝</p>
<p>通常网站的页面与页面之间有一定的逻辑联系，例如想要发送登录的请求example.com/api/login时，通常用户在登录的页面example.com/login下。那么我们只需要验证请求的Referer是否为example.com/login即可</p>
<p>缺陷：某些情况下浏览器不会发送Referer，并且Referer可能被篡改</p>
</li>
<li>
<p>Anti CSRF Token</p>
<p>CSRF能够成功的原因是，攻击方可以完全伪造客户的请求，因为用户的信息存放在cookie中</p>
<p>Toker是一个随机数，同时存放在表单和用户cookie中，通过在form表单或头信息中传递token，发送请求后服务器对请求实体的token和cookie中的token进行对比，并且验证正确后会销毁</p>
</li>
</ol>
]]></content>
    </entry>
</feed>